(() => {

  //variables
  const model = document.querySelector("#model");
  const hotspots = document.querySelectorAll(".Hotspot");

  const materialTemplate = document.querySelector("#materials-template");
  const materialList = document.querySelector("#materials-list");

  const materialListData = [
    {
      heading: "Precision-Crafted Polymers",
      description: "Our earbuds are meticulously molded from high-quality plastics, ensuring a blend of elegance, comfort, and resilience that's second to none."
    },
    {
      heading: "Luxurious Silicone Harmony",
      description: "Our uniquely engineered ear tips are cocooned in plush silicone, delivering an opulent embrace for your ears, ensuring an unrivaled fit and exquisite audio experience."
    },
    {
      heading: "Rubberized Cables",
      description: "Experience the unparalleled freedom of movement with our flexible rubber cables that promise durability without compromise."
    },
    {
      heading: "Enhanced Comfort Sensors",
      description: "A touch of magic in the form of built-in microphones and sensors empowers your earbuds to obey your every command, making your audio journey seamless and enchanting."
    },
    {
      heading: "Artistic Mesh Guard",
      description: "Shielded by artful mesh screens, our speakers remain untarnished, keeping your listening experience pristine."
    }
  ];

const spinner = `<?xml version="1.0" encoding="utf-8"?>
  <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
  <circle cx="50" cy="50" r="0" fill="none" stroke="#e90c59" stroke-width="2">
    <animate attributeName="r" repeatCount="indefinite" dur="1s" values="0;40" keyTimes="0;1" keySplines="0 0.2 0.8 1" calcMode="spline" begin="0s"></animate>
    <animate attributeName="opacity" repeatCount="indefinite" dur="1s" values="1;0" keyTimes="0;1" keySplines="0.2 0 0.8 1" calcMode="spline" begin="0s"></animate>
  </circle><circle cx="50" cy="50" r="0" fill="none" stroke="#46dff0" stroke-width="2">
    <animate attributeName="r" repeatCount="indefinite" dur="1s" values="0;40" keyTimes="0;1" keySplines="0 0.2 0.8 1" calcMode="spline" begin="-0.5s"></animate>
    <animate attributeName="opacity" repeatCount="indefinite" dur="1s" values="1;0" keyTimes="0;1" keySplines="0.2 0 0.8 1" calcMode="spline" begin="-0.5s"></animate>
  </circle>
  <!-- [ldio] generated by https://loading.io/ --></svg>`;

  //functions
  function modelLoaded() {
    hotspots.forEach(hotspot => {
      hotspot.style.display = "block";
    });
  }

  

    //make AJAX call here
    //this is the api url https://swiftpixel.com/earbud/api/infoboxes"

    function gData() {

      fetch ("https://swiftpixel.com/earbud/api/infoboxes")
      .then(response => response.json())
      .then((gData) => {
          // console.log(people);
          console.log(gData);

          
        gData.forEach((_earbudinfo, index) => {
        let selectedHotspot = document.querySelector (`#hotspot-${index + 1}`);

        let earbudText = document.createElement("h3");
        earbudText.textContent = _earbudinfo.heading;

        let earbudPText = document.createElement("p");
        earbudPText.textContent = _earbudinfo.description;
                
        let earbudimage = document.createElement("img");
        earbudimage.src = `images/${_earbudinfo.thumbnail}`;

        
        selectedHotspot.appendChild(earbudimage);
        selectedHotspot.appendChild(earbudText);
        selectedHotspot.appendChild(earbudPText);     
      });
    
    })
      .catch((error) => console.error("Oooooopppsss..... your the page did not load",error));
  }

  gData();


  function loadMaterialInfo() {
    model.innerHTML=spinner;
    // make an AJAX call here
    //this is the api url https://swiftpixel.com/earbud/api/materials"
  //  the forEach loop will go inside a then()/promise

    fetch ("https://swiftpixel.com/earbud/api/materials")
    .then(response => response.json())
    .then((materialListData) => {   
        console.log(materialList);

    materialListData.forEach(material => {
      // clone the template
      const clone = materialTemplate.content.cloneNode(true);
      // populate the cloned template
      const materialHeading = clone.querySelector(".material-heading");
      materialHeading.textContent = material.heading;

      const materialDescription = clone.querySelector(".material-description");
      materialDescription.textContent = material.description;

      // append the populated template to the list
      materialList.appendChild(clone);
      model.innerHTML=""
    });
    })
  }

  loadMaterialInfo();
  
  function showInfo() {
    let selected = document.querySelector(`#${this.slot}`);
    gsap.to(selected, 1, { autoAlpha: 1 });
  }

  function hideInfo() {
    let selected = document.querySelector(`#${this.slot}`);
    gsap.to(selected, 1, { autoAlpha: 0 });
  }

  //Event listeners
  model.addEventListener("load", modelLoaded);

  hotspots.forEach(function (hotspot) {
    hotspot.addEventListener("mouseenter", showInfo);
    hotspot.addEventListener("mouseleave", hideInfo);
  });

})();